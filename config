[filter "media"]
    clean = git media clean %f
    smudge = git media smudge %f
    required = true
[user]
[core]
    ; excludesfile = ~/.gitignore_global
    editor = vim
    pager = /usr/bin/cat 
[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true
[push]
    default = simple
[alias]
    add-commit = !git add -A && git commit
    c = commit
    can = commit --amend --no-edit
    cm = commit -m
    co = checkout
    dog = log --all --decorate --oneline --graph
    files = !git diff --name-only $(git merge-base HEAD \"$REVIEW_BASE\")
    l = log --date=short --decorate --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]"
    # log specific https://stackoverflow.com/questions/1838873/visualizing-branch-topology-in-git/34467298#34467298
    lg = !"git lg1"
    lg1 = !"git lg1-specific --all"
    lg2 = !"git lg2-specific --all"
    lg3 = !"git lg3-specific --all"
    lg1-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)'
    lg2-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(auto)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'
    lg3-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(bold cyan)(committed: %cD)%C(reset) %C(auto)%d%C(reset)%n''          %C(white)%s%C(reset)%n''          %C(dim white)- %an <%ae> %C(reset) %C(dim white)(committer: %cn <%ce>)%C(reset)'
    p = pull
    pp = push
    review = !nvim -p $(git files) +\"tabdo Gdiff $REVIEW_BASE\" +\"let g:gitgutter_diff_base = '$REVIEW_BASE'\"
    sm = submodule
    st = status
    stat = !git diff --stat $(git merge-base HEAD \"$REVIEW_BASE\")
    what = "!git config --get-regexp alias"
[diff]
    algorithm = histogram
[github]
[blame]
    date = relative
[rebase]
    autosquash = true
[commit]
    verbose = true
[status]
    showUntrackedFiles = all
[merge]
    conflictstyle = diff3
[color "status"]
  added = yellow bold
  changed = green bold
  untracked = red bold

